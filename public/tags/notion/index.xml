<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hextra – Notion</title>
    <link>http://localhost:1313/tags/notion/</link>
    <description>Recent content in Notion on Hextra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Dec 2020 08:40:29 +0800</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/tags/notion/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>cs-cache</title>
      <link>http://localhost:1313/blog/cs-cache/</link>
      <pubDate>Tue, 01 Dec 2020 08:40:29 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/cs-cache/</guid>
      <description>
        
        
        &lt;blockquote&gt;
  &lt;p&gt;There can be many caches &lt;code&gt;stacked&lt;/code&gt; on top of each other.
Cache 可以一层一层累积。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;if you miss in one you try in the “lower level cache”
Lower level, mean higher number.
在上层的 Cache miss 了，可以在下层的 Cache 去找。依次类推。&lt;/li&gt;
&lt;li&gt;There can also be &lt;code&gt;separate&lt;/code&gt; caches for data and
instructions. Or the cache can be &lt;code&gt;“unified”&lt;/code&gt;.
数据和指令的 Cache 可以独立，也可以混合。&lt;/li&gt;
&lt;li&gt;to wit:
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;L1 data cache (d-cache)&lt;/code&gt; is the one nearest processor. It
corresponds to the “data memory” block in our pipeline
diagrams&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;L1 instruction cache (i-cache)&lt;/code&gt; corresponds to the
“instruction memory” block in our pipeline diagrams.&lt;/li&gt;
&lt;li&gt;The L2 sits &lt;code&gt;underneath&lt;/code&gt; the L1s.&lt;/li&gt;
&lt;li&gt;There is often an &lt;code&gt;L3 in modern systems&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;cache 指导思想&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cache-指导思想&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cache-%e6%8c%87%e5%af%bc%e6%80%9d%e6%83%b3&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;局部性原理&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;局部性原理&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%b1%80%e9%83%a8%e6%80%a7%e5%8e%9f%e7%90%86&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4&gt;temporal locality (时间局部性)&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;temporal-locality-时间局部性&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#temporal-locality-%e6%97%b6%e9%97%b4%e5%b1%80%e9%83%a8%e6%80%a7&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Taking advantage of temporal locality:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bring data into cache whenever its referenced&lt;/li&gt;
&lt;li&gt;kick out something that hasn’t been used recently&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;spatial locality (空间局部性)&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;spatial-locality-空间局部性&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#spatial-locality-%e7%a9%ba%e9%97%b4%e5%b1%80%e9%83%a8%e6%80%a7&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Taking advantage of spatial locality:
bring in a block of &lt;code&gt;contiguous data (cacheline)&lt;/code&gt;, not just
the &lt;code&gt;requested data&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;基本问题&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;基本问题&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e9%97%ae%e9%a2%98&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;怎样找到 cache 中的数据？&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;怎样找到-cache-中的数据&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%80%8e%e6%a0%b7%e6%89%be%e5%88%b0-cache-%e4%b8%ad%e7%9a%84%e6%95%b0%e6%8d%ae&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
  &lt;p&gt;以 32bits 的内存地址，来分析。
(index, offset) 二维坐标来定位一个 byte 的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;index&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;index&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#index&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;定位 cache line，可视为&lt;code&gt;横坐标&lt;/code&gt;。
现在可以通过 cache lines = cache size / cache line size 来计算。
index bits = log2(cache lines)&lt;/p&gt;
&lt;h4&gt;offset&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;offset&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#offset&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;通过 index 定位到 cache line 后，offset 定位到这个 cache line 的哪一个 byte。
可以视为&lt;code&gt;纵坐标&lt;/code&gt;。
offset bits = log2(offset)&lt;/p&gt;
&lt;h4&gt;tag&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;tag&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tag&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;32bits 剩下的部分。&lt;/p&gt;
&lt;h4&gt;cache line 应该是多大？&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cache-line-应该是多大&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cache-line-%e5%ba%94%e8%af%a5%e6%98%af%e5%a4%9a%e5%a4%a7&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
  &lt;p&gt;这其实是分块(block)思想。在利用空间局部性原理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;cache line size 越大&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cache-line-size-越大&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cache-line-size-%e8%b6%8a%e5%a4%a7&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Exploits more spatial locality.&lt;/li&gt;
&lt;li&gt;Large cache lines effectively prefetch data that we have not
explicitly asked for.
更好地利用空间局部性，提前获取将要访问的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;cache line size 越小&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cache-line-size-越小&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cache-line-size-%e8%b6%8a%e5%b0%8f&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Focuses on temporal locality.&lt;/li&gt;
&lt;li&gt;If there is little spatial locality, large cache lines waste
space and bandwidth.
聚焦在时间局部性上，如果没有较好的空间局部性，提前 &lt;code&gt;fetch&lt;/code&gt; 了数据，那就浪费了空间和带宽。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/stardustman/pictures/raw/main/img/cache_organization.svg&#34; alt=&#34;cache_organization&#34; loading=&#34;lazy&#34; /&gt; #(cache 组织方式)&lt;/p&gt;
&lt;h3&gt;实例分析&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;实例分析&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%ae%9e%e4%be%8b%e5%88%86%e6%9e%90&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;内存地址 32bits。&lt;/p&gt;
&lt;h4&gt;1024 cache lines, 32 Bytes per line.&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;1024-cache-lines-32-bytes-per-line&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#1024-cache-lines-32-bytes-per-line&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;index bits = log2(1024) = 10
offset bits = log2(32) = 5
tags bits = 32 - index - offset = 17&lt;/p&gt;
&lt;h4&gt;32KB cache, 64byte lines&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;32kb-cache-64byte-lines&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#32kb-cache-64byte-lines&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;index bits = log2(32KB / 64Bytes) = 9
offset bits = log2(64) = 6
tags bits = 32 - 9 - 6 = 17&lt;/p&gt;
&lt;h4&gt;set 是干什么的？&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;set-是干什么的&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#set-%e6%98%af%e5%b9%b2%e4%bb%80%e4%b9%88%e7%9a%84&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;(set) &lt;code&gt;Associativity&lt;/code&gt; means providing &lt;code&gt;more than one&lt;/code&gt; place for a cache line to live.
One group of lines corresponds to each index.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it is called a “set”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Each line&lt;/code&gt; in a set is called a &lt;code&gt;“way”&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;N-Way associativity requires N parallel comparators
set = ？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;{% asset_img cache-2-ways-cache.svg 2-ways-cache%}
&lt;img src=&#34;https://github.com/stardustman/pictures/raw/main/img/cache-2-ways-cache.svg&#34; alt=&#34;2-ways-cache&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;cache 哪一种 address？&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cache-哪一种-address&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cache-%e5%93%aa%e4%b8%80%e7%a7%8d-address&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4&gt;virtual memory address&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;virtual-memory-address&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#virtual-memory-address&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;h4&gt;physical memory address&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;physical-memory-address&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#physical-memory-address&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/stardustman/pictures/raw/main/img/cache-memory-address-type.svg&#34; alt=&#34;cache-memory-address-type&#34; loading=&#34;lazy&#34; /&gt; #(缓存类型)&lt;/p&gt;
&lt;h2&gt;References&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://cseweb.ucsd.edu/classes/wi12/cse141-a/Slides/09_Cache_intro.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSE141-Caching-Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cseweb.ucsd.edu/classes/sp10/cse141/pdf/07/09_CSE141-Caching.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSE141-Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cseweb.ucsd.edu/classes/wi12/cse141-a/Slides/10_Caches_detail.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSE141-Caches-Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.0xffffff.org/2014/01/06/26-x86-cache/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;x86-cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/mm/memory-hotplug.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;memory-hotplug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/31859105&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cache 是怎样组织和工作的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/coreinfo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cacheinfo-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://manybutfinite.com/post/intel-cpu-caches/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;intel-cpu-cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.cornell.edu/courses/cs3410/2013sp/lecture/18-caches3-w.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;caches3-w.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CPU_cache&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki-cpu-cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall19/cos316/lectures/10-cpu-cache.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cos316-10-cpu-cache.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aturing.umcs.maine.edu/~meadow/courses/cos335/Intel-CacheOverview.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cos355-Intel-CacheOverview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/31875174&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;细说Cache-L1/L2/L3/TLB&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>acknowledgement-timeout-retry-sequence-number</title>
      <link>http://localhost:1313/blog/acknowledgement-timeout-retry-sequence-number/</link>
      <pubDate>Mon, 30 Nov 2020 10:54:57 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/acknowledgement-timeout-retry-sequence-number/</guid>
      <description>
        
        
        &lt;h3&gt;TCP 要解决的问题&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;tcp-要解决的问题&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tcp-%e8%a6%81%e8%a7%a3%e5%86%b3%e7%9a%84%e9%97%ae%e9%a2%98&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/stardustman/pictures/raw/main/img/notions_tcp.svg&#34; alt=&#34;notions_tcp&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;references&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/tcp-congestion-control/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tcp-congestion-control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.cs.wpi.edu/~rek/Undergrad_Nets/B06/TCP_Congestion_Control.ppt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tcp-congestion-control-ppt&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>
