<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hextra – BTree</title>
    <link>http://localhost:1313/tags/btree/</link>
    <description>Recent content in BTree on Hextra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Jun 2020 14:11:02 +0800</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/tags/btree/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>data-structure-btree</title>
      <link>http://localhost:1313/blog/data-structure-btree/</link>
      <pubDate>Fri, 12 Jun 2020 14:11:02 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/data-structure-btree/</guid>
      <description>
        
        
        &lt;h3&gt;B-tree 特性&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;b-tree-特性&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#b-tree-%e7%89%b9%e6%80%a7&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;所有的 leaves 都在同一层级。&lt;/li&gt;
&lt;li&gt;B-Tree 被 minimum degree t 定义。t 依赖于 disk block size。&lt;/li&gt;
&lt;li&gt;除了 root，其余节点必须至少有 t - 1 个 key。root 节点至少有 1 个 key。&lt;/li&gt;
&lt;li&gt;所有的节点（包括 root）最多有 2t - 1 个 key。&lt;/li&gt;
&lt;li&gt;某一个节点的子节点的个数 = 这个节点的 key 的个数 + 1。&lt;/li&gt;
&lt;li&gt;一个节点的所有 key 从小到大排序。两个 key1 和 key2 之间的所有 child 都在 key1 和 key2 之间。&lt;/li&gt;
&lt;li&gt;B-Tree 从 root 节点 grow(扩张) 和 shrink(收缩)。&lt;/li&gt;
&lt;li&gt;search、insert、delete 时间复杂度是O(log n)。n 是 key 的总数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;t=3 为例来理解 B-tree&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;t3-为例来理解-b-tree&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#t3-%e4%b8%ba%e4%be%8b%e6%9d%a5%e7%90%86%e8%a7%a3-b-tree&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;每一个节点(root 除外) 至少有 t - 1 = 2 个 key。&lt;/li&gt;
&lt;li&gt;每一个节点最多有 2t - 1 = 5 个 key。节点 key 数量 = 5，称为节点满了。
问题来了，节点 key 个数大于 5 了咋办？拆分。什么时候来拆分呢？在向下遍历节点时发现满了，立即进行拆分。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;B-Tree insert operation&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;b-tree-insert-operation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#b-tree-insert-operation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;h5&gt;拆分已满节点&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;拆分已满节点&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%8b%86%e5%88%86%e5%b7%b2%e6%bb%a1%e8%8a%82%e7%82%b9&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/stardustman/pictures/raw/main/img/btree-full-root-split.svg&#34; alt=&#34;btree-full-root-split&#34; loading=&#34;lazy&#34; /&gt; #(btree-拆分已满节点)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如上图，节点1 已经满了，对此时的 root 节点进行拆分。&lt;/li&gt;
&lt;li&gt;创建节点2，s 节点，作为新的 root 节点，同时设置 s.child[0] = root。&lt;/li&gt;
&lt;li&gt;创建节点2，z 节点，将原来 root 节点一半的 key，复制到 z 节点。&lt;/li&gt;
&lt;li&gt;将 z 节点设置为 s 节点的 child。s.child[1] = z。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;拆分已满节点(有子节点)&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;拆分已满节点有子节点&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%8b%86%e5%88%86%e5%b7%b2%e6%bb%a1%e8%8a%82%e7%82%b9%e6%9c%89%e5%ad%90%e8%8a%82%e7%82%b9&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/stardustman/pictures/raw/main/img/btree-full-root-split2.svg&#34; alt=&#34; btree-full-root-split2&#34; loading=&#34;lazy&#34; /&gt; #(btree-拆分已满节点2)&lt;/p&gt;
&lt;p&gt;B-Tree 是向上扩张的(grow)。可以看到所有的 key 都是在 leaf 节点插入的。节点的 key 值的数量一旦等于 2t - 1 = 5 时，就会对该节点进行拆分。所以这也是每一个节点(root 除外)至少有 t-1 = 2 个 key 的原因。&lt;/p&gt;
&lt;h4&gt;B-Tree delete operation&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;b-tree-delete-operation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#b-tree-delete-operation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;h2&gt;References&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.usfca.edu/~galles/visualization/BTree.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BTree-visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/introduction-of-b-tree-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BTree introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/insert-operation-in-b-tree/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BTree insertion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/delete-operation-in-b-tree/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BTree deletion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>
